name: CI Checks

on:
  # TEMPORARILY using two different CI checks workflows due to where runner is called from.
  # If called from a bcda-app workflow, it needs to run on codebuild-bcda-app-... however if called
  # from bcda-ssas-app it needs to be run on codebuild-bcda-ssas-app-...
  # push:
  workflow_call:
    inputs:
      ssas_release_version:
        description: 'Release version (or branch name)'
        required: true
        type: string
  # workflow_dispatch:
  #   inputs:
  #     ssas_release_version:
  #       description: 'Release version (or branch name)'
  #       required: true
  #       type: string

env:
  RELEASE_VERSION: ${{ inputs.ssas_release_version || github.sha }}

jobs:
  go_mod_tidy:
    name: Modules Lint
    runs-on: codebuild-bcda-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: CMSgov/bcda-ssas-app
          ref: ${{ env.RELEASE_VERSION }}
      - name: Get Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Tidy modules
        run: |
          go mod tidy -v
          CHANGES_FOUND=$(git diff-files --quiet)
          if [[ "$(CHANGES_FOUND)" == "1" ]]; then
            echo "Changes found. Run go mod tidy to clean up modules."
            git diff
            exit 1
          fi

  lint_and_test:
    name: Lint and Test
    runs-on: codebuild-bcda-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: CMSgov/bcda-ssas-app 
          ref: ${{ env.RELEASE_VERSION }}
      - name: Get Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Install docker compose manually
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chown root:root /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
      - name: Build the stack
        run: make docker-bootstrap
      - name: Lint and Test
        run: make test
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-ssas
          path: ./test_results/latest/testcoverage-ssas.out

  sonar-quality-gate:
    name: Sonarqube Quality Gate
    needs: lint_and_test
    runs-on: codebuild-bcda-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - name: Set env vars from AWS params
        uses: cmsgov/cdap/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            SONAR_HOST_URL=/sonarqube/url
            SONAR_TOKEN=/sonarqube/token
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: CMSgov/bcda-ssas-app
          fetch-depth: 0
      - name: Download code coverage
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report-ssas
          path: testcoverage-ssas.out
      - name: Run quality gate scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args:
            -Dsonar.projectKey=bcda-ssas-api
            -Dsonar.sources=.
            -Dsonar.working.directory=./sonar_workspace
            -Dsonar.go.coverage.reportPaths=./testcoverage-ssas.out
            -Dsonar.coverage.exclusions=**/*test.go,**/test/**/*,**/testUtils/*,**/scripts/*,**/ops/*,**/mock*.go,**/mock/**/*
            -Dsonar.branch.name=${{ env.RELEASE_VERSION }}
            -Dsonar.projectVersion=${{ github.sha }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.ci.autoconfig.disabled=true 
